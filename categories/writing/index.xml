<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Writing on Code Strokes</title>
    <link>http://localhost:1313/categories/writing/</link>
    <description>Recent content in Writing on Code Strokes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jun 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/writing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Recasting how I blog</title>
      <link>http://localhost:1313/2015/06/converting-to-static-blog/</link>
      <pubDate>Sun, 07 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/2015/06/converting-to-static-blog/</guid>
      <description>

&lt;p&gt;I wrote my first article for codestrokes in February 2011 - right as I was
accepted to graduate school. My goal was to improve my writing in preparation
for writing a thesis. While through grad school I started with more
traditional writing tool. I started to learn to write, and I found my writing
style: Simplicity.  I started writing with a big fancy word processor.
I blogged with a massive database backed blogging engine. By the time
I finished my thesis, I was writing in vim. I used a makefile to check
spelling and check for simple grammatical rules. The process was much simpler
to manage. This motivated me to convert my blog to a static site. This post
describes my process on simplifying my writing process.&lt;/p&gt;

&lt;h1 id=&#34;my-toolchain:f190086b9bc9fe46a11c16626346622b&#34;&gt;My toolchain&lt;/h1&gt;

&lt;p&gt;The primary goal was leverage the writing tool chain I honed during my thesis
for maintaining my blog. I didn&amp;rsquo;t want to complexity of a database backed
blogging site. I wanted to drop my hosting service. I wanted to write in
a markup language. I wrote my thesis in Latex, and I love the separation of
presentation from content. This site you are reading today is composed of:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Markdown written in Vim.&lt;/li&gt;
&lt;li&gt;Changes tracked in git.&lt;/li&gt;
&lt;li&gt;Markdown converted HTML via Hugo.&lt;/li&gt;
&lt;li&gt;Static pages hosted by Github Pages.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;choosing-a-static-site-generator:f190086b9bc9fe46a11c16626346622b&#34;&gt;Choosing a static site generator&lt;/h1&gt;

&lt;p&gt;I actually didn&amp;rsquo;t spend too much time working on this, since someone already
did a great deal of the work at &lt;a href=&#34;https://www.staticgen.com/&#34;&gt;https://www.staticgen.com/&lt;/a&gt;.  If you are
planning to use Github to host your blog, Jekyll will be the easiest to use.
The Github pages even include documentation on how to use Jekyll with Github
pages. I however have an aversion to Ruby (though an order of magnitude
weaker than my aversion to Java).  Near the top was &lt;a href=&#34;gohugo.io&#34;&gt;Hugo&lt;/a&gt;.
A &lt;del&gt;colleague&lt;/del&gt; friend of mine is quite a convincing evangelist of Go,
and I decided to give it a try. &amp;ndash; Boy, was I impressed &amp;ndash; The quality of the
documentation if fantastic. However my favorite feature of Hugo, it is
a single download. One executable. One. No dependencies&amp;hellip; Its hard to express
how incredibly relieving this is.&lt;/p&gt;

&lt;p&gt;As an illustration, let me share with you a little lie. I didn&amp;rsquo;t directly just
to staticgen.com, and find Hugo. I have an affinity for Haskell, and tried to
use a static site generator called &lt;a href=&#34;https://www.staticgen.com/hakyll&#34;&gt;Hakyll&lt;/a&gt;.&lt;br /&gt;
I closed the project from github. The repository included a cabal file, which
I promptly compiled. It took 25 minutes to build all the dependencies. Hakyll
seems awesome, but I wanted something simple. Simple that I can just write,
and the publication process becomes ancillary. Pieter Hintjens states that
a project should continuously seek to reduce barriers for participation.
Comment on this site are a perfect example. &lt;a href=&#34;https://disqus.com/&#34;&gt;Disqus&lt;/a&gt;
strikes a fantastic balance between reducing spam, without requiring everyone
to login to my site. I have no presumptions concerning this site, and
I completely understand that people do not need yet another account to manage.
I want people to comment, hence I use a service that reduces the barrier to
participate.&lt;/p&gt;

&lt;p&gt;A cabal file is a barrier to participate. I want to consume a project, I don&amp;rsquo;t
want to contribute to it (yet). Hugo had the lowest barrier to entry of the
site generators I tried. One executable, no dependencies, and fantastic
documentation.&lt;/p&gt;

&lt;h1 id=&#34;exporting-content:f190086b9bc9fe46a11c16626346622b&#34;&gt;Exporting Content&lt;/h1&gt;

&lt;p&gt;I had a significant number of posts in Wordpress. I wanted to be a good
content creator, and preserve my URIs.  Really, I&amp;rsquo;m &lt;em&gt;wicked&lt;/em&gt; lazy, and
preserving my permalinks meant I would not have to migrate my comments. Disqus
would pick them up on the new site. Thus I wanted an automated way of
exporting my posts from Wordpress. &lt;a href=&#34;https://github.com/thomasf/exitwp&#34;&gt;Exitwp&lt;/a&gt;
worked like a charm.&lt;/p&gt;

&lt;h1 id=&#34;choosing-a-theme:f190086b9bc9fe46a11c16626346622b&#34;&gt;Choosing a theme&lt;/h1&gt;

&lt;p&gt;Hugo has a &lt;a href=&#34;https://github.com/spf13/hugoThemes/&#34;&gt;theme gallery&lt;/a&gt; for all the known themes associated with the
generator.  I picked &lt;a href=&#34;https://github.com/tmaiaroto/hugo-redlounge&#34;&gt;redlounge&lt;/a&gt;.
My only customization was to add Google Analytics so I can track my meager
pages views.&lt;/p&gt;

&lt;h1 id=&#34;writing-articles-in-a-series:f190086b9bc9fe46a11c16626346622b&#34;&gt;Writing articles in a series&lt;/h1&gt;

&lt;p&gt;I tend to write articles broken over many pieces. In fact, this article is
part of my blog transition series. My series support was somewhat lacking in
Wordpress. For this reincarnation of codestrokes.com, I wanted series to be
nice and effective. Hugo&amp;rsquo;s taxonomy makes this possible, but it was a great
series by another author, &lt;a href=&#34;http://npf.io/series/hugo-101/&#34;&gt;Nate Finch&lt;/a&gt; that
made it easy. Ironically, the series starts with an article about how to
design series into Hugo. Brilliant.&lt;/p&gt;

&lt;h1 id=&#34;hosting:f190086b9bc9fe46a11c16626346622b&#34;&gt;Hosting&lt;/h1&gt;

&lt;p&gt;I have a few requirements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Custom domain must work (so I don&amp;rsquo;t have to migrate comments :-)&lt;/li&gt;
&lt;li&gt;Publishing from git would be sweet, but I can configure Travis-CI or
a deployment something to deal with that.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;Github pages!&lt;/a&gt;. I just followed the documentation.&lt;/p&gt;

&lt;h1 id=&#34;my-publishing-process:f190086b9bc9fe46a11c16626346622b&#34;&gt;My Publishing Process&lt;/h1&gt;

&lt;p&gt;Here&amp;rsquo;s how I write now:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone JeremyLWright@github.com&lt;/li&gt;
&lt;li&gt;git checkout content

&lt;ol&gt;
&lt;li&gt;The content branch holds the source, and theme files.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Clone the repository again into the public folder.&lt;/li&gt;
&lt;li&gt;The public folder should be on the master branch.&lt;/li&gt;
&lt;li&gt;Write.&lt;/li&gt;
&lt;li&gt;Revise.&lt;/li&gt;
&lt;li&gt;Write&amp;hellip;&lt;/li&gt;
&lt;li&gt;Run Hugo.&lt;/li&gt;
&lt;li&gt;Commit the content branch.&lt;/li&gt;
&lt;li&gt;Commit the public branch.&lt;/li&gt;
&lt;li&gt;Push!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;m happy with my new process. I&amp;rsquo;m still working out some kinks with my pages
vs posts (hence you see the About Me page in the middle of my posts). I am
prone to shiny things so we&amp;rsquo;ll see how long I keep it. This process is simple.
It removes the barriers of posting, and just lets me write in the tool I am
most comfortable, and but its hard to argue with simple.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Artifical Intelligence Impact on Medicine</title>
      <link>http://localhost:1313/2013/08/artifical-intelligence-impact-on-medicine/</link>
      <pubDate>Wed, 28 Aug 2013 20:16:38 +0000</pubDate>
      
      <guid>http://localhost:1313/2013/08/artifical-intelligence-impact-on-medicine/</guid>
      <description>

&lt;p&gt;Dr. Andrew Weil of the Arizona Center for Integrative Medicine states, “If we can make the correct diagnosis, the healing can begin. If we can’t, both our personal health and our economy are doomed. [1]” Accurate, traceable, and informed diagnosis are paramount to the health of patients. Medicine, within the United States, is an enormous $2.5 Trillion opportunity and with the proliferation of research over many decades new medical findings are being published than could ever be grokked, unassisted, by a doctor [2]. Current advances in data mining have moved to alleviate the shear volume of information available to doctors. Medical data mining offers doctors the tools to distinguish anomalies from trending epidemics; the tools to make evidence based decisions, ultimately leading to more personalized medicine [2].
&amp;lt;!&amp;ndash; more &amp;ndash;&amp;gt;
Hays, describes a tower of Data Mining [2]. The base of this tower is the raw data within the medical field, the images, structured records and unstructured doctors notes. This information is processed, and filtered into patterns and clusters. These clusters form the Information tier of Hays’ tower. Information here is a more refined form of the data, yet remain fully traceable back to the original source. This Information is then processed again to extract knowledge. Knowledge then leads to the top tier of Hays’ model: Decisions. Decisions are the actions of a diagnosis. Once a doctor arrives to a diagnosis, as Dr. Weil states, “healing can begin&amp;hellip; ”. How can this theoritical model be realized? And once prototypes are available, how can such a system be rolled out to doctors without losing the valuable Knowledge tier? One such system, offered by IBM, is a predictive analysis engine which offers probable diagnosis with cited reasoning [3], and its internal representation language Predictive Model Markup Language [4].
Predictive Analysis is a branch of data-mining to make predictions about some future event [5]. Predictive Analytics are typified by their use of a scorecard. One of the more common experiences with such a scorecard, at least in the United States, is that of the FICO credit score, which is a single number or score describing a person’s likelihood to default credit [3]. A scorecar is predictive analysis’ greatest strength as a model. While more powerful, non-linear, models such as neural-networks are capable of spectacular predictive results, neural networks do not provide a traceable artifact to substantiate their predictions [6]. In the face of malpractice and other fault finding behaviors, a traceable score card is invaluable. With such powerful tools, how do we assemble the initial Data tier of Hays’ tower: Digital Records.&lt;/p&gt;

&lt;p&gt;The medical industry has been slow to incorporate digital record keeping, yet current legislation incentivized the practice. Now, digital records emanate from every facet of medicine. The uptake of these digital records is quickly enabling Big Data technologies of all branches to exercise their might. Yet, the biggest impact these models can make is that in rural areas where doctors might not see a volume of patiences sufficient to judge trends or induce the proper research for truly unique cases. Predictive models, plugged into  the global economy of data can offer even small town doctors exceedingly more accurate and better cited diagnosis [3]. Despite the potential power of these tools, the availability of systems for production use is meager. Hayes, cites that the translation from “scientists’ desk” to the doctors’ hand is fraught with technical challenges ranging from privacy concerns, to IT roll out. During these challenges the Knowledge of these systems is sometimes lost. IBM, offers such a solution to preserve Knowledge by providing a standard schema for the predictive models: Predictive Model Markup Language (PMML). This language derived from XML, is a de facto standard method for encoding the Knowledge leveraged by these predictive systems [4]. Independent of the IT processes, database vendor, or operating systems providing doctors access to these platform PMML preserves Knowledge during both storage and exchange.&lt;/p&gt;

&lt;p&gt;Data Mining, has already made a profound impact on medicine by allowing doctors to make informed, cited decisions through highly processed and filtered information, yet the best of the technology is still yet to come. Digital records are still coming into being, and even with the global economy, medicine is still very closed within state governments. Beyond the international privacy and standardization hurdles lie a nirvana of global medical knowledge, Knowledge allowing doctors to improve the health of humanity.&lt;/p&gt;

&lt;h2 id=&#34;references:2177651770b07bae7de745f4eaf72e06&#34;&gt;References&lt;/h2&gt;

&lt;p&gt;[1] D. A. Weil. (Aug. 2009). The wrong diagnosis, The Arizona Center for Integrative Medicine, [Online]. Available: http : / / www . huffingtonpost . com / andrew - weil -md/the-wrong-diagnosis_b_254227.html.
[2] T. P. Hays. (Dec. 2012). Medical data mining, National Institute of Standards and Technology, [Online]. Available: &lt;a href=&#34;http://www.nist.gov/healthcare/upload/Hays-Medical-Data-Mining-slides-for-web.pdf&#34;&gt;http://www.nist.gov/healthcare/upload/Hays-Medical-Data-Mining-slides-for-web.pdf&lt;/a&gt;.
[3] A. Guazzelli. (Nov. 2011). Predictive analytics in healthcare, IBM, [Online]. Available: &lt;a href=&#34;http://www.ibm.com/developerworks/library/ba-ind-PMML3/&#34;&gt;http://www.ibm.com/developerworks/library/ba-ind-PMML3/&lt;/a&gt;.
[4] Wikipedia. (Aug. 2013). Predictive model markup language, Wikipedia, [Online]. Available: &lt;a href=&#34;http://en.wikipedia.org/wiki/Predictive_Model_Markup_Language&#34;&gt;http://en.wikipedia.org/wiki/Predictive_Model_Markup_Language&lt;/a&gt;.
[5] ——, (Aug. 2013). Predictive analytics, Wikipedia, [Online]. Available: &lt;a href=&#34;http://en.wikipedia.org/wiki/Predictive_analytics&#34;&gt;http://en.wikipedia.org/wiki/Predictive_analytics&lt;/a&gt;.
[6] T. Segaran, Programming Collective Intelligence, 1st ed., O’Reilly, Ed. O’Reilly, 2008.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Latex Walkthrough</title>
      <link>http://localhost:1313/2013/03/latex-walkthrough/</link>
      <pubDate>Sun, 24 Mar 2013 18:25:50 +0000</pubDate>
      
      <guid>http://localhost:1313/2013/03/latex-walkthrough/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://vimeo.com/62553880&#34;&gt;Latex Walkthrough&lt;/a&gt; from &lt;a href=&#34;http://vimeo.com/user14085157&#34;&gt;Jeremy Wright&lt;/a&gt; on &lt;a href=&#34;http://vimeo.com&#34;&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
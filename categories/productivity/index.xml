<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Productivity on The Quiescent Current</title>
    <link>/categories/productivity/</link>
    <description>Recent content in Productivity on The Quiescent Current</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©2020 Jeremy Wright</copyright>
    <lastBuildDate>Sun, 24 Nov 2013 22:14:50 +0000</lastBuildDate>
    
        <atom:link href="/categories/productivity/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sean Parent: No Raw Loops</title>
      <link>/2013/11/sean-parent-no-raw-loops/</link>
      <pubDate>Sun, 24 Nov 2013 22:14:50 +0000</pubDate>
      
      <guid>/2013/11/sean-parent-no-raw-loops/</guid>
      <description>A group of colleagues and I watched Sean Parent&amp;rsquo;s Going Native Talk on &amp;ldquo;C++ Seasoning&amp;rdquo;. Parent takes some extreme views on how to use C++, but his examples for using the STL to simplify code are phenomenal. For a recent AI project I decided to apply Parent&amp;rsquo;s goal of &amp;ldquo;no raw loops&amp;rdquo;, I was blown away by the transformation&amp;hellip; err std::transformation this had on my code. In this post I indented to demonstrate several complex code blocks, or overly specific code blocks what were replaced by some STL magic.</description>
      
    </item>
    
    <item>
      <title>Text Processing for Programmers</title>
      <link>/2013/02/text-processing-for-programmers/</link>
      <pubDate>Sun, 17 Feb 2013 19:53:11 +0000</pubDate>
      
      <guid>/2013/02/text-processing-for-programmers/</guid>
      <description>I was reading a blog about coding interviews, and one comment made near the bottom struck me, &amp;ldquo;&amp;hellip;&amp;ldquo;Um&amp;hellip; grep?&amp;rdquo; then they&amp;rsquo;re probably OK&amp;hellip;&amp;rdquo; As I read that comment, I realized I&amp;rsquo;d never answer that way, and I agreed with the author that was a problem. That began my dabble in grep, awk and sed, and these tools will change your workflow and even how you think about profiling code. Grep has even become a verb in my daily life, &amp;ldquo;Is this greppable?</description>
      
    </item>
    
    <item>
      <title>The Turbulent History of Managed Code</title>
      <link>/2012/08/the-turbulent-history-of-managed-code/</link>
      <pubDate>Tue, 28 Aug 2012 05:31:04 +0000</pubDate>
      
      <guid>/2012/08/the-turbulent-history-of-managed-code/</guid>
      <description>Managed Code is a fascinating technology; Just-In-Time compilation provides advanced run-time optimization and strong type safety can render the hardware MMU obsolete. However the managed code renaissance is again in decline, and interestingly more than technology, business is changing the managed/native landscape. More than any other other metric, managed code is about maximizing programmer productivity.
In 1977, Infocom released Zork. Zork was an innovative game. Its sophisticated linguistics made for an immersive experience for its adventurers.</description>
      
    </item>
    
  </channel>
</rss>

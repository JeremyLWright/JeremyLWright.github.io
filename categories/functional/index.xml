<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Functional on The Quiescent Current</title>
    <link>/categories/functional/</link>
    <description>Recent content in Functional on The Quiescent Current</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â©2020 Jeremy Wright</copyright>
    <lastBuildDate>Thu, 28 Aug 2014 05:04:52 +0000</lastBuildDate>
    
        <atom:link href="/categories/functional/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello Project Euler, Sorry I doubted you</title>
      <link>/2014/08/hello-project-euler-sorry-i-doubted-you/</link>
      <pubDate>Thu, 28 Aug 2014 05:04:52 +0000</pubDate>
      
      <guid>/2014/08/hello-project-euler-sorry-i-doubted-you/</guid>
      <description>Project Euler returns with full functionality including new problems! Thank you Project Euler for not giving up on this awesome project. http://projecteuler.net/news</description>
      
    </item>
    
    <item>
      <title>Goodbye Project Euler</title>
      <link>/2014/06/goodbye-project-euler/</link>
      <pubDate>Wed, 18 Jun 2014 15:42:22 +0000</pubDate>
      
      <guid>/2014/06/goodbye-project-euler/</guid>
      <description>A group of friends and I have been working on project euler for about a year now. I learned a great deal from this fantastic project, and it was the first time I was able to get a real handle on Haskell. Project Euler taught me make. It taught me better performance reporting techniques, honed my octave, and got me over that initial mind bending hump of Haskell. Thank you Project Euler, you will be missed.</description>
      
    </item>
    
    <item>
      <title>My Haskell Environment for Project Euler</title>
      <link>/2013/08/my-haskell-environment-for-project-euler/</link>
      <pubDate>Fri, 02 Aug 2013 16:51:40 +0000</pubDate>
      
      <guid>/2013/08/my-haskell-environment-for-project-euler/</guid>
      <description>For the last several months I&amp;rsquo;ve been working on Project Euler in Haskell. My intent has been to learn Haskell, and grasp the functional concepts. While working on several problems it&amp;rsquo;s important to have a workflow that allows for a fast cycle time. I spent some time with Cabal, attempting to build a scheme that works efficiently, but was unable to do so. Instead I setup a mix of cabal-dev, and make to build a fast workflow that allow for compiling, testing, common code libraries, and benchmarks.</description>
      
    </item>
    
    <item>
      <title>Haskell Day 1 (Again)</title>
      <link>/2013/04/haskell-day-1-again/</link>
      <pubDate>Mon, 22 Apr 2013 05:29:11 +0000</pubDate>
      
      <guid>/2013/04/haskell-day-1-again/</guid>
      <description>I&amp;rsquo;ve restarted my haskell programming education. Here is my implementation of FizzBuzz
fizzbuzz x | x `mod` 15 == 0 = &amp;quot;FIZZBUZZ&amp;quot; | x `mod` 3 == 0 = &amp;quot;FIZZ&amp;quot; | x `mod` 5 == 0 = &amp;quot;BUZZ&amp;quot; | otherwise = show x main = print (map fizzbuzz [1..100])  [suffusion-adsense client=&amp;lsquo;ca-pub-6284398857369558&amp;rsquo; slot=&amp;lsquo;1495369305&amp;rsquo; width=&amp;lsquo;728&amp;rsquo; height=&amp;lsquo;90&amp;rsquo;]</description>
      
    </item>
    
  </channel>
</rss>

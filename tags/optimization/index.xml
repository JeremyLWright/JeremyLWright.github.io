<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>optimization on Quiescent Engineering, LLC.</title>
    <link>/tags/optimization/</link>
    <description>Recent content in optimization on Quiescent Engineering, LLC.</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©2020 Jeremy Wright</copyright>
    <lastBuildDate>Sun, 14 Jul 2013 23:00:11 +0000</lastBuildDate>
    
        <atom:link href="/tags/optimization/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Is Monolithic Code Faster?</title>
      <link>/2013/07/is-monolithic-code-faster/</link>
      <pubDate>Sun, 14 Jul 2013 23:00:11 +0000</pubDate>
      
      <guid>/2013/07/is-monolithic-code-faster/</guid>
      <description>As a software engineer I have a vested interest in disproving this statement. Bjarne Stroustroup says C++ is designed to create efficient abstractions. A software engineer’s job is to create simple abstractions to complex systems. State machines form a large part of many systems. The other day, a co-worker came to me, and asked, “Is it better to make straight line code for each case statement, even if it repeats, or is it better to abstraction into functions and make the code ‘cleaner’.</description>
      
    </item>
    
  </channel>
</rss>

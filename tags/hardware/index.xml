<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hardware on The Quiescent Current</title>
    <link>https://quiescent.us/tags/hardware/</link>
    <description>Recent content in hardware on The Quiescent Current</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â©2022 Jeremy Wright</copyright>
    <lastBuildDate>Sun, 28 Nov 2021 00:00:00 -0700</lastBuildDate><atom:link href="https://quiescent.us/tags/hardware/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Why is bool one byte: Wasting space to save time</title>
      <link>https://quiescent.us/2021/11/why-bool-is-one-byte/</link>
      <pubDate>Sun, 28 Nov 2021 00:00:00 -0700</pubDate>
      
      <guid>https://quiescent.us/2021/11/why-bool-is-one-byte/</guid>
      <description>Boolean carries 1 bit of information. The canonical example of binary, On/Off, True/False. Yet, the bool type in C and C++ is 1 byte large, 8 bits of information. Carrying thus $$2^8 = 256$$ representable values. This may not sound like much, but consider an array of bools (a common misunderstanding beginning C++ students make trying to formulate a bit-field): bool fatBitField[8]
This wasted space however has a useful purpose. It a common reason in many optimizations we make in data structures, we trade space for time.</description>
    </item>
    
  </channel>
</rss>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>realtime on The Quiescent Current</title>
    <link>https://quiescent.us/tags/realtime/</link>
    <description>Recent content in realtime on The Quiescent Current</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â©2021 Jeremy Wright</copyright>
    <lastBuildDate>Sun, 29 May 2011 18:02:24 +0000</lastBuildDate>
    
        <atom:link href="https://quiescent.us/tags/realtime/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flowcharts as a Conversation: Rubber Ducking our Designs</title>
      <link>https://quiescent.us/series/refined-software-development/rsd-vending/</link>
      <pubDate>Mon, 08 Nov 2021 00:00:00 -0700</pubDate>
      
      <guid>https://quiescent.us/series/refined-software-development/rsd-vending/</guid>
      <description>&lt;p&gt;Imagine a design process as a conversation. What could you accomplish if you could
ask your designs questions? That flow chart on the wall or whiteboard&amp;hellip; What
would you ask it if you could?&lt;/p&gt;
&lt;h1 id=&#34;the-devil-is-in-the-details&#34;&gt;The Devil is in the Details&lt;/h1&gt;
&lt;p&gt;Have you ever worked with a detail-oriented colleague? One of those
individuals who consistently asks you to clarify your position. Whenever you
make an adjustment, this colleague goes back and rechecks all previous
statements. They&amp;rsquo;re your partner.  They aren&amp;rsquo;t there to affirm you, or your ego.
They are there to assure the work you do is as correct as it can be. They
allow you to remain mentally at the high-level concepts, while they concern
themselves with the minutia.  Our experience shows us that it is the minutia
that introduces fundamental flaws, concepts we addressed, but relaxed for some
other constraint suddenly renders our algorithms errant. The English idiom,
&lt;em&gt;the devil is in the details&lt;/em&gt; is nowhere less true than software.&lt;/p&gt;
&lt;p&gt;In this post, I propose &lt;a href=&#34;https://github.com/tlaplus&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;TLA+&lt;/a&gt;
&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is your
detail-oriented colleague, a mechanical friend for transforming your
flowcharts and design sketches into a conversation where the computer helps
you identify gaps and fallacies. We&amp;rsquo;ll also see how &lt;a href=&#34;https://quiescent.us/img/soda.png&#34;&gt;TLA+ can draw your flowcharts&lt;/a&gt;
 as well so you don&amp;rsquo;t lose that visual feedback.&lt;/p&gt;
&lt;p&gt;TLA+ is a specification language. TLA+ targets a tool called TLC. Together
they can help you design applications, especially concurrent and parallel
systems. TLA+ while being a deeply rigorous verification tool for parallel
systems, can also be used for sketching simple systems. Engineers and students
alike use flow charts to sketch their programs. TLA+ can be used for these
simple use cases as well a conversational transformation from a static description
of boxes and arrows to a interactive conversation.&lt;/p&gt;
&lt;h2 id=&#34;caveats-to-the-reader&#34;&gt;Caveats to the reader&lt;/h2&gt;
&lt;p&gt;If you are a reader who&amp;rsquo;s an accomplished programmer, or you know programming
and software engineering well, this post may seem simplistic, however I encourage
you to read this post and watch the video&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. TLA+ is a deep tool but it is
only through humility that we can learn to express it&amp;rsquo;s power. TLA+ will
render you a beginner again. This is a good thing, although you will not feel
productive immediately. You will not skim the book over a weekend and apply it
to your problem on Monday.  This will take time, but I believe it is time well
spent.&lt;/p&gt;
&lt;p&gt;Give TLA+ a chance to work &lt;em&gt;on&lt;/em&gt; you, so that it can work &lt;em&gt;for&lt;/em&gt; you.&lt;/p&gt;
&lt;p&gt;This post is intended to be paired with a video&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h1 id=&#34;without-tla-we-design-with-a-yes-man&#34;&gt;Without TLA+ we design with a &amp;lsquo;Yes-Man&amp;rsquo;&lt;/h1&gt;
&lt;p&gt;Whiteboards don&amp;rsquo;t check anything. They are a medium for getting
your thoughts out of your head. This is a great technique for slowing down,
yes. When you need to brainstorm, or &lt;em&gt;ideation&lt;/em&gt; you don&amp;rsquo;t want that detail
focus. In that phase, Whiteboards are great! Use them! However, once that
phase is done, jumping from whiteboards to coding could be a mistake.
Whiteboards don&amp;rsquo;t check anything. They don&amp;rsquo;t help reason through the details.
They don&amp;rsquo;t check that the system actually achieves your goal. They don&amp;rsquo;t check
that the system has subtlety errant transitions.&lt;/p&gt;
&lt;h2 id=&#34;a-simple-vending-machine&#34;&gt;A Simple Vending Machine&lt;/h2&gt;
&lt;p&gt;For example, given a sketch of a vending machine, you could ask questions such
as, &amp;ldquo;Will you vend soda without money?&amp;rdquo; Or potentially you could ask, &amp;ldquo;What
would you do if you ran out of soda?&amp;rdquo; Conversation is a powerful tool for
thought, however the quality of the conversation as a diagnostic tool is
dependent on who the conversation is with.&lt;/p&gt;


  
    
  


&lt;figure&gt;
  &lt;img
    src=&#39;https://g.gravizo.com/svg?%0adigraph%20A%20%7b%0a%22Want%20Soda%22%20-%3e%20%22Have%20Soda%22%20%5blabel%3d%22Money%20in%20Machine%22%5d%3b%0a%22Have%20Soda%22%20-%3e%20%22Want%20Soda%22%20%5blabel%3d%22Drink%20Soda%22%5d%3b%0a%7d%0a&#39;
    alt=&#39;What would you ask a flowchart?&#39;
    /&gt;
    &lt;figcaption&gt;What would you ask a flowchart?&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;This graph is simple, but as we can immediately see it&amp;rsquo;s too simple to express
our needs. It doesn&amp;rsquo;t capture how much money we have, or that our money is
decreasing as we drink soda. In the traditional paradigm, we just add more
states&lt;/p&gt;


  
    
  


&lt;figure&gt;
  &lt;img
    src=&#39;https://g.gravizo.com/svg?%0adigraph%20A%20%7b%0a%22I%20have%20money%3f%22%20-%3e%20%22I%20Want%20Soda%22%20%5blabel%3d%22Yes%22%5d%3b%0a%22I%20have%20money%3f%22%20-%3e%20%22%3f%3f%3f%22%20%5blabel%3d%22No%22%5d%3b%20%0a%22I%20Want%20Soda%22%20-%3e%20%22I%20Have%20Soda%22%20%5blabel%3d%22Money%20in%20Machine%22%5d%3b%0a%22I%20Have%20Soda%22%20-%3e%20%22I%20Want%20Soda%22%20%5blabel%3d%22Drink%20Soda%22%5d%3b%0a%7d%0a&#39;
    alt=&#39;More detail, but still hard to &amp;#39;check&amp;#39;&#39;
    /&gt;
    &lt;figcaption&gt;More detail, but still hard to &amp;#39;check&amp;#39;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;What happens when you don&amp;rsquo;t have money? If your design as a conversation, and
entity you could interview, not only would the design process be more
collaborative, but your designs would be more resistant to change.  Finally,
instead of just drawing within a design tool, using the computer for little
more than a collaborative scratch-pad the computer itself would be a colleague
assisting your design and though process.  Helping to identify details you may
mentally &lt;em&gt;skip over&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now, herein lies the value of leaving the whiteboard, and providing
a checkable system definition. We could, with enough effort and time prove to
ourselves that the system is sound. Given enough effort and time, we could
potentially be correct. However we don&amp;rsquo;t build systems alone. For your next
colleague to understand the system they&amp;rsquo;d have to apply the same thought
process, the same rigorous, tedious, process to prove to themselves they
understand the system and that it achieves the goal. Furthermore, this process?
Includes you. You have to be present in transferring that knowledge. Other
engineering disciplines don&amp;rsquo;t do this. They produce blueprints, models,
&lt;em&gt;finite element analyses&lt;/em&gt;, that serve are checkable artifacts the system
design is sound, that the components chosen meet specified criteria. We
software engineers should be so bold to follow the footsteps of the
hard-sciences and specify our systems.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-tla&#34;&gt;Setting up TLA+&lt;/h1&gt;
&lt;p&gt;Markus Kuppe has a great walk through of using the toolbox&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. If you simply hate Eclipse, that&amp;rsquo;s
understandable and there is a VS Code offering as well. However, if you are
using TLA+ for the first time, I recommend trying the toolbox since it&amp;rsquo;s the
easiest to get started. In my experience defining the models takes some tribal
knowledge in the VS code style. While it&amp;rsquo;s easier for a git workflow, it takes
some getting used to. Try the toolbox first, then decide if you should choose
VS Code instead.&lt;/p&gt;
&lt;h2 id=&#34;setup-tlc-to-draw-flowchartsstate-diagrams&#34;&gt;Setup TLC to draw flowcharts/state-diagrams&lt;/h2&gt;
&lt;p&gt;Add parameters to the TLC command line in the toolbox &lt;code&gt;-dump dot,actionlabels,colorize,snapshot  soda.dot&lt;/code&gt;
&lt;a href=&#34;https://quiescent.us/img/2021-11-03-tla-plus-as-a-flowchart.png&#34;&gt;Configure TLC to dump state diagram&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Doing this will dump a new file &lt;code&gt;soda.dot&lt;/code&gt; every time the model is run.
I like to put an fswatch on the dot file so the diagram redraws automatically.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fswatch -o soda.dot | xargs -n1 dot soda.dot -Tpng -osoda.png&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now everytime soda.dot changes, the dot compiler will make a new png.&lt;/p&gt;
&lt;h1 id=&#34;sketching-out-soda-machine&#34;&gt;Sketching out soda machine&lt;/h1&gt;
&lt;p&gt;Imagine we have the following toy program or assignment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Design a vending machine.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The machine must take money, and deliver soda.&lt;/li&gt;
&lt;li&gt;If no soda is available then the machine must not keep the money.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;What&amp;rsquo;s your traditional design process? Sketch a flowchart, or some UML? Let&amp;rsquo;s
take a step back and recall how we used to design things before we were
programmers. Those first programs we design where it all fit inside &lt;code&gt;main() &lt;/code&gt;  because we didn&amp;rsquo;t know how to make functions yet. In a word, Let&amp;rsquo;s Start
Simply.&lt;/p&gt;
&lt;h2 id=&#34;what-are-the-variables&#34;&gt;What are the variables?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;I, the user, wants soda, so lets make a variable for that &lt;code&gt;IWantSoda&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Next, there is a soda machine with some number of sodas inside
&lt;code&gt;sodaMachine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;I could presently have a soda or not, &lt;code&gt;IHaveSoda&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Finally, I have some amount of money, &lt;code&gt;Money&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The professional programmers among you may be thinking
now about abstractions. The electrical engineers among you may be thinking how
the hardware will function or what interrupts need to be configured. These are
good, but let&amp;rsquo;s come &lt;em&gt;up&lt;/em&gt; a level of detail. In a future post I will describe
&lt;em&gt;refinement&lt;/em&gt; as a method of connecting a very high-level description, the
essence/pseudocode of our designs to an actual design.&lt;/p&gt;
&lt;p&gt;Great, now that we have the variables let&amp;rsquo;s consider what possible values
those variables have.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Money&lt;/code&gt; must be greater than or equal to 0.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sodaMachine&lt;/code&gt; must be greater than or equal to 0 sodas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IWantSoda&lt;/code&gt; is true or false.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IHaveSoda&lt;/code&gt; is true or false.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s it. That&amp;rsquo;s our domain. So let&amp;rsquo;s next consider our actions.&lt;/p&gt;
&lt;h2 id=&#34;what-are-the-actions&#34;&gt;What are the Actions?&lt;/h2&gt;
&lt;p&gt;An action in TLA+ is a transition between states. It&amp;rsquo;s simply the edges of our
flowchart.&lt;/p&gt;


  
    
  


&lt;figure&gt;
  &lt;img
    src=&#39;https://g.gravizo.com/svg?%0adigraph%20A%20%7b%0a%22Some%20State%20A%22%20-%3e%20%22Some%20State%20B%22%20%5blabel%3d%22Edges%20are%20actions%22%5d%3b%0a%7d%0a&#39;
    alt=&#39;Edges are actions&#39;
    /&gt;
    &lt;figcaption&gt;Edges are actions&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ol&gt;
&lt;li&gt;If the soda machine has soda, and I don&amp;rsquo;t, then I put money in the machine.
That&amp;rsquo;s an action &lt;code&gt;PutMoneyInMachine&lt;/code&gt; (This might become
a function/procedure in our final program, but for now, let&amp;rsquo;s just call it
an action)
&lt;ol&gt;
&lt;li&gt;When I put money in the machine either the machine has soda, or it
doesn&amp;rsquo;t. If it does then the machine takes my money and gives me
a soda.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s it. Our system is pretty simple, when we have money, we buy soda until
the machine is out of soda, or we are out of money. So far, TLA+ hasn&amp;rsquo;t given
us anything a normal flowchart can&amp;rsquo;t, but we&amp;rsquo;re about to make our flowchart
answer questions.&lt;/p&gt;
&lt;h2 id=&#34;interviewing-our-flowchart&#34;&gt;Interviewing our Flowchart&lt;/h2&gt;
&lt;p&gt;What would you ask our design if you could? Perhaps, Do I eventually got soda?
TLA+ uses a branch of mathematics called Temporal Logic, which allows us to
ask questions such as &lt;em&gt;eventually&lt;/em&gt; and &lt;em&gt;always&lt;/em&gt;. Additionally, we can combine
these to ask if &amp;ldquo;once something happens it remains&amp;rdquo;. In TLA+ we express these
questions with &lt;code&gt;&amp;lt;&amp;gt; means eventually&lt;/code&gt; and &lt;code&gt;[] means always&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;English&lt;/th&gt;
&lt;th&gt;TLA+&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;eventually&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;always&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thus our question:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;English&lt;/th&gt;
&lt;th&gt;TLA+&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;ldquo;Do I eventually get soda&amp;rdquo;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;gt;IHaveSoda&lt;/code&gt; (Remember IHaveSoda TRUE or FALSE, i.e., &lt;code&gt;IHaveSoda \in {TRUE, FALSE}&lt;/code&gt;).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;However, we can only have soda, if we have money, hence we need to express the
idea if &amp;ldquo;&lt;em&gt;always&lt;/em&gt; when I have money, then &lt;em&gt;eventually&lt;/em&gt; I have soda&amp;rdquo; This is called
&amp;ldquo;implication&amp;rdquo; in TLA+ we express this as &lt;code&gt;[](IHaveMoney =&amp;gt; &amp;lt;&amp;gt;IHaveSoda)&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;English&lt;/th&gt;
&lt;th&gt;TLA+&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;always&lt;/em&gt; when I have money, then &lt;em&gt;eventually&lt;/em&gt; I have soda&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[](IHaveMoney =&amp;gt; &amp;lt;&amp;gt;IHaveSoda)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;However, as we&amp;rsquo;ll see in the video&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, TLC finds a counter-example for this
temporal equation. TLC shows us a case we didn&amp;rsquo;t consider.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! Let&amp;rsquo;s model this in TLA+ and see how the process makes our designs
interactive. Follow along with the video&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, or check-out the spec and play with
it yourself.&lt;/p&gt;
&lt;h1 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h1&gt;
&lt;p&gt;My deepest thanks to my colleagues for providing an environment conducive of
learning and applying this material. I&amp;rsquo;d like to thank &lt;a href=&#34;https://github.com/Alexander-N&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Alexander NiederbÃ¼hl&lt;/a&gt;
 for his review of this post and his
consistent attendance of our TLA+ study group. I&amp;rsquo;d like to thank &lt;a href=&#34;https://github.com/johnmcconnell&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;John McConnell&lt;/a&gt;
 for asking thought provoking
questions that drive me to better understand. Finally, I&amp;rsquo;d like to thank the TLA+
mailing list for kindly engaging with my questions and taking each question as
an opportunity to teach.&lt;/p&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;TLC is an explicit state model checker for specifications written in TLA+. The TLA+Toolbox is an IDE for TLA+.  &lt;a href=&#34;https://github.com/tlaplus&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://github.com/tlaplus&lt;/a&gt;
&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Wright, Jeremy. Sketching Designs with TLA+. &lt;a href=&#34;https://youtu.be/alyqcphUaiI&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://youtu.be/alyqcphUaiI&lt;/a&gt;
&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Kuppe, Markus. TLA+ Toolbox. &lt;a href=&#34;https://www.youtube.com/watch?v=U2FAnyPygrA&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://www.youtube.com/watch?v=U2FAnyPygrA&lt;/a&gt;
&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>21st Century Proof :: Structure makes it possible, hard work makes it probable</title>
      <link>https://quiescent.us/2021/09/twenty-first-century-proof/</link>
      <pubDate>Mon, 13 Sep 2021 00:00:00 -0700</pubDate>
      
      <guid>https://quiescent.us/2021/09/twenty-first-century-proof/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;A new way of expressing: &amp;ldquo;work smarter not harder&amp;rdquo; -&amp;gt; Structure makes it possible, hard work makes it probable.&lt;/li&gt;
&lt;li&gt;Detail can obscure the big picture. Structure can help, if it allows for a personalized, or tunable about of illumination.&lt;/li&gt;
&lt;li&gt;A proof is not easy if we must read the entire proof to understand.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://lamport.azurewebsites.net/pubs/proof.pdf&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Source&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;This weekend I skimmed Leslie Lamport&amp;rsquo;s &lt;a href=&#34;https://lamport.azurewebsites.net/pubs/proof.pdf&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;How to Write a 21st Century Proof&lt;/a&gt;
. In it Lamport discusses how mathematicians process for proof has largely unchanged since the 17th century, &amp;ldquo;&amp;hellip;Newton&amp;rsquo;s &lt;em&gt;Principia&lt;/em&gt; seem quite modern&amp;hellip;&amp;rdquo; he states. While I don&amp;rsquo;t aspire to proof, this paper provides two illuminating points I want reflect. One more philosophical regarding the nature of working smart and working hard. The second, how structure itself is worthy of praise.&lt;/p&gt;
&lt;h1 id=&#34;a-better-work-smarter&#34;&gt;A better work smarter&lt;/h1&gt;
&lt;p&gt;My issue with the platitude, &amp;ldquo;&amp;hellip;work smarter not harder&amp;hellip;&amp;rdquo; is that much of the work I do is hard. Applying intelligence, rigor, or discipline doesn&amp;rsquo;t not, in general, nullify hard work. Lamport&amp;rsquo;s recasting is insightful. It&amp;rsquo;s that because our work is hard, doing it without &amp;ldquo;smarter&amp;rdquo; approaches renders it impossible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Structure makes is possible, hard work makes it probable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For the task at hand, proof writing, structure provides a clarity that small details aren&amp;rsquo;t missed. Its the &amp;ldquo;work smarter&amp;rdquo; component of the process. Only after this is a good result possible. Only after this does the real work begin.&lt;/p&gt;
&lt;h1 id=&#34;structure-is-work-good-work&#34;&gt;Structure is work, good work.&lt;/h1&gt;
&lt;p&gt;In my daily work, &amp;ldquo;working code speaks loudest&amp;rdquo;. The key operational word here is &lt;em&gt;working&lt;/em&gt;. Working code speaks loudest. I feel the stress on working is too often lacking. This phrase is used to assert that we should just start coding to show or &lt;em&gt;prove&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt; that something is a good idea. I understand the concept of play. Playing with code/idioms/tools to see if something is possible. However, to have a consistently good, consistently working outcome, it takes structure.&lt;/p&gt;
&lt;p&gt;Lamport, here, discusses structure in terms of a proof. I have a phrase, &amp;lsquo;turn the crank&amp;rsquo;. In it I mean, reduce the hard things to a process so you can just turn the crank to &lt;em&gt;crank out&lt;/em&gt; the next thing, or the incrementally better thing. A lack of structure and/or process doesn&amp;rsquo;t necessarily allow one to crank. Instead it leaves each successive step with this dilemma of what direction analysis paralysis. A structure around the problem at hand, allows one to continuously cut the problem in half. Each decision cuts off a branch of work one doesn&amp;rsquo;t need to do, or is not important at the moment. The last of structure leaves one without this narrowing of effort.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I enjoyed the paper, and it&amp;rsquo;s filled with interesting &lt;em&gt;exercises to the reader&lt;/em&gt; around proof, and building structure. I&amp;rsquo;m choosing to ignore these for now, and focus on model checking as I work on a new project idea called &amp;ldquo;Riffing Algorithms&amp;rdquo;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Prove in the colloquial sense, not the rigorous. mathematical sense.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>My TLA&#43; Saga</title>
      <link>https://quiescent.us/2021/09/my-tla-saga/</link>
      <pubDate>Wed, 08 Sep 2021 00:00:00 -0700</pubDate>
      
      <guid>https://quiescent.us/2021/09/my-tla-saga/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Learning together is more fun, and you may not be as self-taught as you believe.&lt;/li&gt;
&lt;li&gt;The stories we tell ourselves deeply impact our ability (or inability) to grow.&lt;/li&gt;
&lt;li&gt;The more you learn, the more challenging the material becomes to continue growing. (a.k.a. Duh, but it took me time to realize it, regardless)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This year mark&amp;rsquo;s my 3rd attempt to learn TLA+.&lt;/p&gt;
&lt;p&gt;The first time was likely around the same time &lt;a href=&#34;https://www.hillelwayne.com/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Hillel Wayne&lt;/a&gt;
 also discovered it. Although where Hillel (obviously) &lt;a href=&#34;https://www.hillelwayne.com/talks/tackling-concurrency-tlaplus/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;grokked it the first time&lt;/a&gt;
, when I discovered that TLA+ is not a tool for auto-generating property based tests, I quit.&lt;/p&gt;
&lt;p&gt;The second time, I attended the &lt;a href=&#34;https://conf.tlapl.us/2019/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;TLA+ conference in 2019&lt;/a&gt;
. I was better prepared to understand the purpose of a spec. This is, in part, because I was aware of the &amp;ldquo;big picture&amp;rdquo; of the day-job&amp;rsquo;s work. Where I had work in aviation, and and embedded systems for awhile, I was compartmentalized. Understandably so as I earned more experience, however I was unprepared to understand large scale the purpose of a specification. 2019 I was just starting to see the value. However, I had a second personal hurdle: I was &amp;ldquo;self taught&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Being &amp;ldquo;self-taught&amp;rdquo; was a point of pride for me. I encapsulated my value to an team by my ability to understand new ideas and be effective reasonably quickly. So much so, that I realized I would hamper myself my not asking for help so I could carry the badge of &amp;ldquo;I&amp;rsquo;m self taught&amp;rdquo;. Guess what, no one cares. If you learn something with a group, from a teacher, or on your own&amp;hellip; NO ONE CARES.&lt;/p&gt;
&lt;p&gt;Also, it was at least partially a lie. Up to this point, I told myself: &amp;ldquo;taught myself C++&amp;rdquo;. Ya, no. I was surrounded by colleagues who knew a plethora of languages: Python, Go, D, C. Yes, I would self-study, but being surrounded by those who can provide a contrast for your own understanding of a material &lt;em&gt;is invaluable&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;This third time, I &lt;a href=&#34;https://www.reddit.com/r/tlaplus/comments/lvloul/study_partner/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;posted to reddit&lt;/a&gt;
: Who&amp;rsquo;s coming with me!??!!? It&amp;rsquo;s going better. Stay tuned for a series on my todo spec.&lt;/p&gt;
&lt;p&gt;Finally, thank you to all those in my life who helped me learn the things I know. I am self-motivated, but my knowledge is because of the people in my life.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The World Is Not Incremental</title>
      <link>https://quiescent.us/2021/03/not-incremental/</link>
      <pubDate>Wed, 03 Mar 2021 15:00:00 -0700</pubDate>
      
      <guid>https://quiescent.us/2021/03/not-incremental/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been struggling to understand the stress the TLAâº community is putting on the presence of &lt;em&gt;math&lt;/em&gt; in the  specifications.
Namely, that specifications are not programming, and the math simplifies, by abstraction, the system.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What exactly is being simplified by using math, instead of &amp;ldquo;programming&amp;rdquo;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;During TLAâº study group this week, we discussed at least 1 aspect that applying math simplifies the description of our systems $$\rightarrow$$ The number of states.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://lamport.azurewebsites.net/tla/hyperbook.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Hyperbook&lt;/a&gt;
 defines the standard model of digital systems as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Standard Model â An abstract system is described as a collection of behaviors,
each representing a possible execution of the system, where a behavior is a
sequence of states and a state is an assignment of values to variables.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The subtle, intriguing part of this definition is the &lt;em&gt;a state is an assignment of values to variables&lt;/em&gt;. Variables. Plural.&lt;/p&gt;
&lt;p&gt;Hence, a state transition is not defined as an assignment, but rather a set of consistent definitions from a to b.&lt;/p&gt;
&lt;p&gt;Consider the following C code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;//State isn&amp;#39;t complete until here..
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compare this to how we would represent this state in math, e.g., as part of the standard model. We abstract away the incremental nature of &amp;ldquo;assignment&amp;rdquo; and &amp;ldquo;operations&amp;rdquo;. Instructions are implementation details, they are simply how we build a digital system. They are not in themselves part of our system.&lt;/p&gt;
&lt;p&gt;$$
Init \triangleq
\wedge a = 1
\wedge b = 5
\wedge c = 1 + 5$$&lt;/p&gt;
&lt;p&gt;However, when programming, these incremental states are real. We must consider them, especially in the presence of errors.&lt;/p&gt;


  
    
  


&lt;figure&gt;
  &lt;img
    src=&#39;https://g.gravizo.com/svg?%0a%20%20digraph%20G%20%7b%0a%20%20%20%20a%20%5blabel%3d%22A%5cn%7ba%3d5%7d%22%5d%0a%20%20%20%20b%20%5blabel%3d%22B%5cn%7ba%3d5%20b%3d3%7d%22%5d%0a%20%20%20%20c%20%5blabel%3d%22C%5cn%7ba%3d5%20b%3d3%20c%3d8%7d%22%5d%0a%20%20%20%20done%20%5bfillcolor%3d%22grey%22%20label%3d%22Done%22%5d%0a%0a%20%20%20%20init%20-%3e%20a%0a%20%20%20%20a%20-%3e%20b%0a%20%20%20%20b%20-%3e%20c%0a%20%20%20%20c%20-%3e%20done%0a%20%20%7d%0a&#39;
    alt=&#39;Example System States for C Program&#39;
    /&gt;
    &lt;figcaption&gt;Example System States for C Program&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Consider a language with exceptions. You have the following&lt;/p&gt;


  
    
  


&lt;figure&gt;
  &lt;img
    src=&#39;https://g.gravizo.com/svg?%0a%20%20digraph%20G%20%7b%0a%20%20%20%20a%20%5blabel%3d%22A%5cn%7ba%3d5%7d%22%5d%0a%20%20%20%20b%20%5blabel%3d%22B%5cn%7ba%3d5%20b%3d3%7d%22%5d%0a%20%20%20%20c%20%5blabel%3d%22C%5cn%7ba%3d5%20b%3d3%20c%3d8%7d%22%5d%0a%20%20%20%20done%20%5bfillcolor%3d%22grey%22%20label%3d%22Done%22%5d%0a%20%20%20%20throw%20%5blabel%3d%22Handle%20Exception%22%5d%0a%0a%20%20%20%20init%20-%3e%20a%0a%20%20%20%20a%20-%3e%20b%0a%20%20%20%20b%20-%3e%20c%0a%20%20%20%20c%20-%3e%20done%0a%20%20%20%20%0a%20%20%20%20init%20-%3e%20throw%20%5blabel%3d%22throw%20BadThingException%28%29%3b%22%5d%0a%20%20%20%20a%20-%3e%20throw%20%5blabel%3d%22throw%20BadThingException%28%29%3b%22%5d%0a%20%20%20%20b%20-%3e%20throw%20%5blabel%3d%22throw%20BadThingException%28%29%3b%22%5d%0a%20%20%20%20c%20-%3e%20throw%20%5blabel%3d%22throw%20BadThingException%28%29%3b%22%5d%0a%20%20%20%20throw%20-%3e%20done%0a%20%20%7d%0a&#39;
    alt=&#39;State explosions due to exceptions&#39;
    /&gt;
    &lt;figcaption&gt;State explosions due to exceptions&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Similarly, go code has checks for nil, but the effect is the same, state explosion as the programmer assembles a particular complete state incrementally.&lt;/p&gt;
&lt;p&gt;Thus, math allows us to more concisely describe a single atomic state. This has other impacts however though, which the hyperbook attempts to tease out in Section 2.7, Question 2.2. The next steps of my study, thus are to tackle this question and enrich my greycode specification.&lt;/p&gt;
&lt;h1 id=&#34;learning-questionshahahugoshortcode-s2-hbhb&#34;&gt;&lt;a href=&#34;https://quiescent.us/2020/05/learning-process/&#34;&gt;Learning Questions&lt;/a&gt;
&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Express &lt;a href=&#34;https://github.com/JeremyLWright/specs/blob/algorithm/max/algorithm/GreyCodeCounter/GreyCodeCounter.tla&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;GreyCode&lt;/a&gt;
 in TLAâº&lt;/li&gt;
&lt;li&gt;Express the invariants in greycode as a temporal action instead of using ghost variables.&lt;/li&gt;
&lt;li&gt;Hyperbook Section 2.7: Question 2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h1&gt;
&lt;p&gt;Thank you to Alexander N. for his collaboration, time and insight into TLAâº.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using QuickCheck&#39;s Positive Type Level Modifier</title>
      <link>https://quiescent.us/2020/12/quickcheck-type-level-modifiers/</link>
      <pubDate>Thu, 24 Dec 2020 00:00:00 -0700</pubDate>
      
      <guid>https://quiescent.us/2020/12/quickcheck-type-level-modifiers/</guid>
      <description>&lt;p&gt;One of my students this semester was struggling with the material. This
student is a very diligent worker and has been researching the problems trying
to get a better understanding of the material before digging in. Sometimes
however, there is no replacement for just digging in and coding something.
This does at least two things, it solidifies the material you&amp;rsquo;re read so far,
and most importantly it shows you the limits of what you currently understand
and urges you to learn more. Interestingly, I&amp;rsquo;ve found in my own intellectual
endeavors some things just don&amp;rsquo;t make any sense until you&amp;rsquo;ve tried to use it
&lt;em&gt;in anger&lt;/em&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I gave this student the advice to&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Put down the books.
Pick up a pencil, some paper and a compiler
Code it. Make your brain hurt.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As I was sharing this I realized how hypocritical I was. I&amp;rsquo;ve &lt;em&gt;been
learning&lt;/em&gt; Haskell, and yet I haven&amp;rsquo;t coded in Haskell in over a year. I&amp;rsquo;ve
been reading books, watching videos.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;ve been a Spectator.
It&amp;rsquo;s time to be a Doer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I started working through the codewars.com problems, specifically working on
the test cases for this &lt;a href=&#34;https://www.codewars.com/kata/576757b1df89ecf5bd00073b/train/haskell&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;problem&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;While coding the QuickCheck properties (tests) for this problem however, I was
completely lost at trying to build a property with only positive generator
values.&lt;/p&gt;
&lt;p&gt;This particular test is trying to show that the height of the pyramid is the
length of the out put array/list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span class=&#34;nf&#34;&gt;prop_heightIsLength&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;Bool&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;prop_heightIsLength&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buildTower&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, &lt;code&gt;buildTower&lt;/code&gt; only defined for positive values. My first pass of
the property is generates negative values (and 0 values) as input. After some
searching I was able to find the Positive type modifier for quickcheck.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/QuickCheck-2.4.1.1/docs/Test-QuickCheck.html#t:Positive&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://hackage.haskell.org/package/QuickCheck-2.4.1.1/docs/Test-QuickCheck.html#t:Positive&lt;/a&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span class=&#34;nf&#34;&gt;prop_heightIsLength&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Positive&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;Bool&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;prop_heightIsLength&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buildTower&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, this doesn&amp;rsquo;t compile.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Couldn&#39;t match expected type âPositive Intâ
                  with actual type âIntâ
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which brings me to my biggest challenge in learning anything new. Frequently
in learning something new I don&amp;rsquo;t have enough knowledge to ask the right
question, or even understand the answer. This is one of those cases.&lt;/p&gt;
&lt;h2 id=&#34;failed-questions&#34;&gt;Failed Questions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;haskell unwrap Positive newtype&lt;/li&gt;
&lt;li&gt;haskell use QuickCheck Positive&lt;/li&gt;
&lt;li&gt;haskell constraint quickcheck generator&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This lead me to the closest answer&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/11910143/positive-integer-type#11910221&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;https://stackoverflow.com/questions/11910143/positive-integer-type#11910221&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;However, it is demonstrating how to build a custom generator. I just want to
use the built in constraints!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why is this so hard?
Because I didn&amp;rsquo;t know how to read the type signature of the Postive type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span class=&#34;c1&#34;&gt;-- This property does not compile&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;prop_heightIsLength&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Positive&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;Bool&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;prop_heightIsLength&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buildTower&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;


&lt;span class=&#34;c1&#34;&gt;-- This property compiles&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;prop_heightIsLength&amp;#39;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;::&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Positive&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;-&amp;gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;Bool&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;prop_heightIsLength&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;Positive&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buildTower&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Naively, I thought the different is the parenthesis. Remember, parenthesis are
&lt;em&gt;only used for grouping&lt;/em&gt; in haskell. They have no other purpose. The different
is &lt;em&gt;what is bound to the name &lt;code&gt;height&lt;/code&gt;&lt;/em&gt;. In the first version, I&amp;rsquo;m binding
a &lt;code&gt;Positive Int&lt;/code&gt; to the name &lt;code&gt;height&lt;/code&gt; in the second version I&amp;rsquo;m
binding merely an &lt;code&gt;Int&lt;/code&gt; to &lt;code&gt;height&lt;/code&gt;. The Positive type modifier
assures that the values bound to it&amp;rsquo;s parameter are always positive. The bound
value however will retain the &lt;code&gt;Int&lt;/code&gt; type, even though it&amp;rsquo;s value is always
positive.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m unstuck now. Moving on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://quiescent.us/about/</link>
      <pubDate>Sun, 20 Dec 2020 17:30:00 -0700</pubDate>
      
      <guid>https://quiescent.us/about/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;When you do things right, no one can be sure you did anything at all.&lt;/p&gt;
&lt;p&gt;â Futurama Season 3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I specialize in the software no one sees. The high performance, concurrent,
hard real-time, high-reliability systems that enable our way of life.&lt;/p&gt;
&lt;p&gt;My software fights fraud, and drives tractors. I&amp;rsquo;ve baked solar cells, made
escalators more efficient, optimized fantasy sports. My software helps
airplanes land safely.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve improved data center efficiency, and contributed designs and
implementation of risk-management microservices for high-performance payment
systems behind &lt;a href=&#34;https://ZellePay.com&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;ZelleÂ®&lt;/a&gt;
. Currently, I am working to
integrated messaging at &lt;a href=&#34;https://joylabs.com&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;JoyLabs&lt;/a&gt;
 and &lt;a href=&#34;https://memo.com/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Memo&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Through all my digital adventures I&amp;rsquo;ve never forgot what it is to be
a beginner. I love to share that curiosity, and freshness with others in my
classes.&lt;/p&gt;
&lt;h2 id=&#34;research-interests&#34;&gt;Research Interests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Formal Specifications&lt;/li&gt;
&lt;li&gt;Mentoring &amp;amp; Teaching&lt;/li&gt;
&lt;li&gt;Type Safety&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;talks&#34;&gt;Talks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;2&lt;!-- raw HTML omitted --&gt;nd&lt;!-- raw HTML omitted --&gt; Place Arizona State &lt;a href=&#34;https://aztoastmasters.org/spring-2018-contest-results/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Toastmasters International Speech 2018&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vimeo.com/39505796&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Hosted Script for Games&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;papers&#34;&gt;Papers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://quiescent.us/publications/WRIGHT_JEREMY_1000738685.pdf&#34;&gt;Master&amp;rsquo;s Thesis&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code&#34;&gt;Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JeremyLWright/hillclimbing-decryptor&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Hill Cracker - A hill climbing system for cracking monoalphabetic
ciphers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JeremyLWright/CloudAssure&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Cloud Assure - A cloud based POMDP data leakage system&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JeremyLWright/thesis&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Whispers - A cloud based risk assessment&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JeremyLWright/WebDocumentSystem&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;WebDoc - Multi-user document sharing system&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JeremyLWright/cse548-RoboTractor&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;RoboTractor - a Machine automatic system over XMPP&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;my-free-time&#34;&gt;My Free Time&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JeremyLWright/dotfiles&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;dotfiles&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;img  src=&#34;https://projecteuler.net/profile/jwright85.png&#34;
        alt=&#34;Project Euler&#34;/&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My Learning Process</title>
      <link>https://quiescent.us/2020/05/learning-process/</link>
      <pubDate>Mon, 25 May 2020 15:31:21 -0700</pubDate>
      
      <guid>https://quiescent.us/2020/05/learning-process/</guid>
      <description>&lt;h1 id=&#34;as-of-2020&#34;&gt;As of 2020&lt;/h1&gt;
&lt;h2 id=&#34;learning-questions&#34;&gt;Learning Questions&lt;/h2&gt;
&lt;p&gt;My learning process consists of a set of learning questions. These questions
are almost certainly wrong and reflect at least the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;My motivation for learning a topic.&lt;/li&gt;
&lt;li&gt;My misconceptions of a given topic and the seemingly magic qualities
a beginner believes it can provide.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The learning questions are initially, almost certainly wrong. This is good. It
shows my current understanding or lack there-of. Refinement of these questions
over time will lead to a deeper understanding of the material.&lt;/p&gt;
&lt;h2 id=&#34;anki-cards&#34;&gt;Anki Cards&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m currently following the precepts of incremental reading, and capturing of
facts and ideas into Anki cards. These cards serve as a foundation for
understanding. Facts themselves cannot build intuition but they provide
anchors for a framework of understanding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TLA&#43; Chapter 1: Reflection</title>
      <link>https://quiescent.us/series/pratical-tla&#43;/tla-chap1/</link>
      <pubDate>Mon, 25 May 2020 15:00:14 -0700</pubDate>
      
      <guid>https://quiescent.us/series/pratical-tla&#43;/tla-chap1/</guid>
      <description>&lt;p&gt;The first time I opened &lt;a href=&#34;https://www.hillelwayne.com/post/practical-tla/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Hillel&amp;rsquo;s
book&lt;/a&gt;
 and skimmed the first
chapter I was subconsciously looking for a reason not to sink a bunch of time
into yet another language/ecosystem project. That bias prevented me from
seeing the point of the first chapter.&lt;/p&gt;
&lt;p&gt;Hillel&amp;rsquo;s first chapter ends with a definition of stuttering and how in the
presence of real world temporal effects, a safe, reliable in all cases wire
transfer system borders on impossible. This initially turned me off,
sophomorically reflecting, &amp;ldquo;Well if this book won&amp;rsquo;t let me make reliable
software then forget it.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;This result however is precisely what formal methods and TLA+ in particular
seeks to provide. These tools tell you, in 22 lines of PlusCal that your
assumptions about the eventual consistency of your system is invalid.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PlusCal shows you in 22 lines that your assumptions of your are invalid.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This simply wire transfer specification generates 25 unique system states, and
the seemingly obvious property that no money gets created or lost &lt;em&gt;doesn&amp;rsquo;t
hold&lt;/em&gt;.  In my experience, these types of fundamental properties are exactly
the type of thing that get&amp;rsquo;s lost in requirements, and never gets checked in
testing. This is where PlusCal shines: showing you that your assumptions need
refinement.&lt;/p&gt;
&lt;h2 id=&#34;learning-questionshahahugoshortcode-s0-hbhb&#34;&gt;&lt;a href=&#34;https://quiescent.us/2020/05/learning-process/&#34;&gt;Learning Questions&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;This leads me to refine my motivation for learning TLA+ (and PlusCal).
Throughout this journey, we&amp;rsquo;ll see what of these motivations hold to be true
and which are refined:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Build intuitive models to validate system assumptions.&lt;/li&gt;
&lt;li&gt;Build models to verify the &amp;ldquo;obvious stuff&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Identify when system properties change.
&lt;ol&gt;
&lt;li&gt;When working on a legacy system are assumptions and practices that were
try at the beginning of the design still true? Id est, do the
invariants and eventual consistent properties of the system still hold
after the countless features and patches added over time?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;anki-cardshahahugoshortcode-s1-hbhb&#34;&gt;&lt;a href=&#34;https://quiescent.us/2020/05/learning-process/&#34;&gt;Anki Cards&lt;/a&gt;
&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;In temporal logic {{c1::Stuttering}} is when a process simply stops.&lt;/li&gt;
&lt;li&gt;Stuttering models what real world phenomena?
&lt;ol&gt;
&lt;li&gt;Timeouts, slow consumers, server crashes.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>System languages should include Webapps</title>
      <link>https://quiescent.us/2015/10/system-languages-include-web/</link>
      <pubDate>Sat, 03 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://quiescent.us/2015/10/system-languages-include-web/</guid>
      <description>&lt;p&gt;I was reading an &lt;a href=&#34;https://isocpp.org/wiki/faq/strange-inheritance&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;FAQ&lt;/a&gt;
 today about some subtle C++ point and I came across
a comment that explicitly excludes the beginning language-learner.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By the way, it confuses most novice C++ programmers that private virtuals
can be overridden&amp;hellip; However the private virtual approach is now common
enough that confusion of novices is less of a concern.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This left me frustrated that a language that has been core to my personal
success so flippantly brushed aside its future user. The C++ community is
certainly undergoing a transformation. There is active effort to modernize,
and refresh C++.  However, lending a hand to beginners is not C++&amp;rsquo;s forte.
There are more &lt;a href=&#34;codereview.stackexchange.com&#34;&gt;resources&lt;/a&gt;
 to learn programming
today than when I started, however the struggles of a beginner are largely
unchanged. This comment left me thinking not that this C++ idiom is easier
to understand, its that there aren&amp;rsquo;t any novices left in the C++ community.&lt;/p&gt;
&lt;p&gt;I am currently reintroducing myself to D. There are two things that
I admire about the community. First, D is frank about the inconsistencies in
their language, and actively try to make it easier to understand. Second,
D embraces web application.&lt;/p&gt;
&lt;p&gt;During the &lt;a href=&#34;http://dconf.org/2015/index.html&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;DConf videos&lt;/a&gt;
 speakers voice pain points, and
inconsistencies in the language. The point isn&amp;rsquo;t to complain, but to
acknowledge that language experts are not the only users.  With each point Walter
Bright (the language&amp;rsquo;s author) carefully considers each point.&lt;/p&gt;
&lt;p&gt;For example, one individual suggested that D&amp;rsquo;s mixins are &amp;ldquo;unprincipled&amp;rdquo;.
Unprincipled meaning mixins are strings rather than expression trees as in C#&amp;rsquo;s
LINQ, or Abstract Syntax Trees as in Rust&amp;rsquo;s macros. Bright however
&lt;a href=&#34;https://www.youtube.com/watch?v=s83u5iw67TY&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;responded&lt;/a&gt;
 that he agrees mixins are unprincipled, but
&amp;ldquo;&amp;hellip;[that] they are easy to understand.&amp;rdquo;  Making mixins as straightforward as string
manipulation makes an otherwise advanced technique something a novice can use.&lt;/p&gt;
&lt;p&gt;I can certainly attest to the complexity of C#&amp;rsquo;s LINQ. I&amp;rsquo;ve
&lt;!-- raw HTML omitted --&gt;worked&lt;!-- raw HTML omitted --&gt; struggled on a LINQ provider for a in-house database
engine. LINQ Expression Trees are certainly in the upper echelons of advanced
techniques. Implementing mixins as string manipulation is a beautiful
concession to making a language easier to use.&lt;/p&gt;
&lt;p&gt;The second principle I loved about the D community, and the thesis of
this post, is a single statement on &lt;a href=&#34;http://wiki.dlang.org/Vision/2015H1&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;D&amp;rsquo;s roadmap&lt;/a&gt;

&amp;ldquo;Emphasize &lt;a href=&#34;http://vibed.org/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;vibe.d&lt;/a&gt;
&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://vibed.org/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Vibe.d&lt;/a&gt;
 is an asynchronous I/O and web framework library for D.
I find the combination of I/O library and web framework similar to &lt;a href=&#34;https://playframework.com/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Play
Framework&amp;rsquo;s&lt;/a&gt;
 approach from Scala.  D is classified as a system
language. The same class as C++. However the D community considers (as does the &lt;a href=&#34;https://www.reddit.com/r/rust/comments/3n3b2d/trying_rust_for_web_services/cvl1lx1&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Rust
community&lt;/a&gt;
, &lt;a href=&#34;https://blog.wearewizards.io/trying-rust-for-web-services&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;1&lt;/a&gt;
, &lt;a href=&#34;http://arewewebyet.com/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;2&lt;/a&gt;
) web
services a key enabler.&lt;/p&gt;
&lt;p&gt;C++ is entrenched in enterprise applications.  However languages like D, and
Rust are among the few that can compete with C++&amp;rsquo;s performance. This is,
I believe, C++&amp;rsquo;s last life-preserving feature, entrenchment.  C++ is hard to
learn, hard to use, tends to define language experts (also see Haskell).  But
it is everywhere, and I can get a good paying job by knowing it.&lt;/p&gt;
&lt;p&gt;HTTP/REST has established itself as the lingua-franca of Service Oriented
Architectures.  &lt;a href=&#34;http://engineering.linkedin.com/play/play-framework-linkedin&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;LinkedIn&lt;/a&gt;
 maintains a beautiful and informative
blog about engineering a massively-online-multiplayer-role-playing-game, also
known as a social network. At it&amp;rsquo;s heart are a number of services, written in
various languages, all linked together via HTTP. HTTP is the key that binds
them all. D is on-board with HTTP, and embracing the Web. Rust appears to be
as well. This is certainly a massive opportunity to compete with C++ at the
heart of its entrenchment, enterprise services.&lt;/p&gt;
&lt;p&gt;As I work on my own personal projects, I like to use compiled languages. I have
quite a bit of experience with Django, but I don&amp;rsquo;t feel confident to build
a large, long-term project in a duck-typed language. At risk of sounding like
a Haskeller, a strong type system really does help enforce a consistent
application. Even if one just considers refactoring, the compiler looks at
every line of code, and every function call, every time. I like to believe I&amp;rsquo;m
professional enough an engineer to say my unit-test exercise 100% coverage,
but I know I&amp;rsquo;ve never been successful in doing so. I would like to leverage my
expertise in C++ to build my personal web service experiments, but there
simply isn&amp;rsquo;t a reasonable way to do that. Go is certainly a contender for this
space, but I prefer languages that give me more of a hand in generic
(parametric polymorphic) techniques. For me, now, that language is D.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>4 Simple Steps to Run D Language in Azure Websites</title>
      <link>https://quiescent.us/2015/09/deploying-d-to-azure-webapp/</link>
      <pubDate>Fri, 25 Sep 2015 20:10:00 +0700</pubDate>
      
      <guid>https://quiescent.us/2015/09/deploying-d-to-azure-webapp/</guid>
      <description>&lt;p&gt;&lt;em&gt;I shameless stole these steps from &lt;a href=&#34;http://www.wadewegner.com/2014/12/4-simple-steps-to-run-go-language-in-azure-websites/&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;4 Simple Steps to Run Go Language in Azure Websites&lt;/a&gt;
. This post is simply a transliteration to D. Thank you very much to Wade Wegner for the original post.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;4-simple-steps&#34;&gt;4 Simple Steps&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Create your Azure Website in Azure Portal.
&lt;ol&gt;
&lt;li&gt;Configure FTP deployment&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img  src=&#34;https://quiescent.us/img/Azure-FTP-Config.png&#34;
        alt=&#34;FTP Configuration&#34;/&gt;&lt;/p&gt;
&lt;p&gt;2. Run &lt;code&gt;dub init vibed_hello_world --type=vibe.d&lt;/code&gt; and change the default app.d to read the port from an environment variable. &lt;a href=&#34;https://vibed.org/docs&#34;target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;Docs&lt;/a&gt;
&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-d&#34; data-lang=&#34;d&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;vibe.d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;shared&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;std.process&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;std.conv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;immutable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;HTTP_PLATFORM_PORT&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//Use the port IIS tells us to.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HTTPServerSettings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ushort&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;bindAddresses&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;::1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;listenHTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;settings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

	&lt;span class=&#34;n&#34;&gt;logInfo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Please open http://127.0.0.1:&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/ in your browser.&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HTTPServerRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HTTPServerResponse&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;writeBody&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3. Create Web.Config&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;system.webServer&amp;gt;&lt;/span&gt;
		&lt;span class=&#34;nt&#34;&gt;&amp;lt;handlers&amp;gt;&lt;/span&gt;
			&lt;span class=&#34;nt&#34;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;name=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;httpplatformhandler&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;path=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;verb=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;modules=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;httpPlatformHandler&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;resourceType=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Unspecified&amp;#34;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
		&lt;span class=&#34;nt&#34;&gt;&amp;lt;/handlers&amp;gt;&lt;/span&gt;
		&lt;span class=&#34;nt&#34;&gt;&amp;lt;httpPlatform&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;processPath=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;d:\home\site\wwwroot\vibed_hello_world.exe&amp;#34;&lt;/span&gt; 
					&lt;span class=&#34;na&#34;&gt;arguments=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; 
					&lt;span class=&#34;na&#34;&gt;startupTimeLimit=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;60&amp;#34;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
			&lt;span class=&#34;nt&#34;&gt;&amp;lt;environmentVariables&amp;gt;&lt;/span&gt;
			&lt;span class=&#34;nt&#34;&gt;&amp;lt;/environmentVariables&amp;gt;&lt;/span&gt;
		&lt;span class=&#34;nt&#34;&gt;&amp;lt;/httpPlatform&amp;gt;&lt;/span&gt;
	&lt;span class=&#34;nt&#34;&gt;&amp;lt;/system.webServer&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4. Upload binaries and DLLs to Azure!
&lt;img  src=&#34;https://quiescent.us/img/upload-to-ftp.png&#34;
        alt=&#34;Upload to FTP Server&#34;/&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
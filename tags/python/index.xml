<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on The Quiescent Current</title>
    <link>https://quiescent.us/tags/python/</link>
    <description>Recent content in Python on The Quiescent Current</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>©2022 Jeremy Wright</copyright>
    <lastBuildDate>Sat, 22 Sep 2012 15:36:10 +0000</lastBuildDate><atom:link href="https://quiescent.us/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ASULUG Talk: Django Web Framework</title>
      <link>https://quiescent.us/2012/09/asulug-talk-django-web-framework/</link>
      <pubDate>Sat, 22 Sep 2012 15:36:10 +0000</pubDate>
      
      <guid>https://quiescent.us/2012/09/asulug-talk-django-web-framework/</guid>
      <description>ASU Linux User’s Group (ASULUG) — LUG Talks
Sat 6 Oct 1:30pm — BYENG 210
** **
The Django Web Framework
Jeremy Wright
Abstract
Django: Awesome Jazz Musician, Awesome Web Framework.
Django is a web framework similar to the popular Ruby on RAILS, but leveraging the Python programming language. Born out of the newspaper industry, Django is touted as the “web framework for perfectionists with deadlines.” Django is a powerful tool for any size web project: Web Services, Storefronts, CMS’s—Django conquers all.</description>
    </item>
    
    <item>
      <title>Making C&#43;&#43; like Python: The Anderson Smart Pointer Pattern</title>
      <link>https://quiescent.us/2011/10/making-c-like-python-the-anderson-smart-pointer-pattern/</link>
      <pubDate>Sun, 23 Oct 2011 19:00:21 +0000</pubDate>
      
      <guid>https://quiescent.us/2011/10/making-c-like-python-the-anderson-smart-pointer-pattern/</guid>
      <description>&lt;p&gt;Choosing to use C++ brings the additional complexity of memory management.  Dennis Ritchie once stated: The C Programming Language — A language which combines the flexibility of assembly language with the power of assembly language. C++ inherits much of that _flexibility, _however, this &lt;a href=&#34;http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey&#34;&gt;incidental complexity&lt;/a&gt;, can be relegated to a single class, leaving you with the high-level elegance of Python. RAII help with this additional complexity, however without a pattern for guidance implementing RAII consistently can be difficult, defeating the safety it provides.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Good Tools, Excellent Results</title>
      <link>https://quiescent.us/2011/08/good-tools-excellent-results/</link>
      <pubDate>Sun, 21 Aug 2011 07:23:25 +0000</pubDate>
      
      <guid>https://quiescent.us/2011/08/good-tools-excellent-results/</guid>
      <description>&lt;p&gt;This semester for the C++ practicum we are building a clone of Zork.  Like many games of the genre, Zork is driven by a database.  Our implementation is a JSON database.  I chose JSON for a few reasons, but most importantly because its a human readable format that&amp;rsquo;s simple to understand.  I started by editing JSON files by hand in a text editor, however I found very quickly that investigating in a quick tool greatly improved my quality.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
